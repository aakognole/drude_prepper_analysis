"""
Generated by CHARMM-GUI (http://www.charmm-gui.org)

omm_restratins.py

This module contains restraint functions for OpenMM.

Correspondance: jul316@lehigh.edu or wonpil@lehigh.edu
Last update: March 29, 2017
"""

from simtk.unit import *
from simtk.openmm import *
from simtk.openmm.app import *

def restraints(system, psf, crd, inputs):

    boxlx = system.getDefaultPeriodicBoxVectors()[0][0].value_in_unit(nanometers)
    boxly = system.getDefaultPeriodicBoxVectors()[1][1].value_in_unit(nanometers)
    boxlz = system.getDefaultPeriodicBoxVectors()[2][2].value_in_unit(nanometers)

    if inputs.fc_pos > 0:
        # position restraints for protein
        posres = CustomExternalForce('fc_pos*(px^2+py^2+pz^2); \
                                      px=min(dx, boxlx-dx); \
                                      py=min(dy, boxly-dy); \
                                      pz=min(dz, boxlz-dz); \
                                      dx=abs(x-x0); \
                                      dy=abs(y-y0); \
                                      dz=abs(z-z0);')
        posres.addGlobalParameter('boxlx', boxlx)
        posres.addGlobalParameter('boxly', boxly)
        posres.addGlobalParameter('boxlz', boxlz)
        posres.addPerParticleParameter('fc_pos')
        posres.addPerParticleParameter('x0')
        posres.addPerParticleParameter('y0')
        posres.addPerParticleParameter('z0')

        for atom in psf.atom_list:
            if atom.residue.resname == 'SWM1' or atom.name.startswith('D'): continue
            xpos  = crd.positions[atom.idx].value_in_unit(angstroms)[0]/10
            ypos  = crd.positions[atom.idx].value_in_unit(angstroms)[1]/10
            zpos  = crd.positions[atom.idx].value_in_unit(angstroms)[2]/10
            posres.addParticle(atom.idx, [inputs.fc_pos, xpos, ypos, zpos])
        system.addForce(posres)

    return system
